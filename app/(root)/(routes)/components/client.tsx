"use client";

import { useRouter } from "next/navigation";
import { useCompletion } from "ai/react";
import { FormEvent, useState } from "react";

import { ChatHeader } from "@/components/chat-header";
import { Companion, Message } from "@prisma/client";
import { ChatForm } from "@/components/chat-form";
import ChatMessages from "@/components/chat-messages";
import { ChatmessageProps } from "@/components/chat-message";
import { toast } from "@/components/ui/use-toast";
import useLanguageSet from "@/hooks/useLanguageSet";
import axios from "axios";


interface ChatClientProps {
    companion: Companion & {
        messages: Message[],
        _count: {
            messages: number;
        };
    };
};

export const ChatClient = ({ companion }: ChatClientProps) => {
    const router = useRouter();

    const [messages, setMessages] = useState<ChatmessageProps[]>(companion.messages);
    const [voiceLoading, setVoiceLoading] = useState(false);
    const languageSet = useLanguageSet();
    // const [lang, setLang] = useState<string>('eng');

    // alternative to useCOmpletion is useFormHook but vercel has this amazing package for ai tools
    const {
        input,
        isLoading,
        handleInputChange,
        handleSubmit,
        setInput,
    } = useCompletion({
        // define ai call that is going to generate ai messages
        // awaiting messgae generated by ai
        //VVVV.imp
        // we will be needing memory service
        // we will be using pinecone: vector database for creating embedding for our ai model
        // we will be using upstash/redis to holdon to memory
        // we will be using upstash/ratelimit ,so no user can spam our rate limit
        api: `/api/chat/${companion.id}`,
        onFinish(prompt, completion) {
            // creating ai message obj
            // storing it as sys message
            const systemMessage: ChatmessageProps = {
                role: "system",
                content: completion,
            };





            setMessages((current) => [...current, systemMessage]);
            setInput("");



            if (systemMessage.content) {

                if (languageSet.lang === 'en-US') {

                    handleGenerationTTS(systemMessage.content);
                }
                if (languageSet.lang === 'ne-NP') {
                    handleNepaliTTS(systemMessage.content)
                }

            }
            // so all server component are updated
            router.refresh();


            console.log(systemMessage.content);

        }
    });

    // elevenlabs
    const handleGenerationTTS = async (text: string) => {
        setVoiceLoading(true);
        try {

            console.log('text', text)
            if (!text || text.trim() === '') {
                toast({
                    variant: "destructive",
                    description: "Something went wrong. NO text to generate the voice",
                    duration: 3000,
                });
                return;
            };
            // const response = await fetch("/api/elevenlabs", {
            //     method: "POST",
            //     headers: {
            //         "Content-Type": "application/json",
            //     },
            //     body: JSON.stringify({
            //         message: text,
            //         voice: '21m00Tcm4TlvDq8ikWAM'
            //     }),

            // })


            await axios.post(
                `https://api.elevenlabs.io/v1/text-to-speech/21m00Tcm4TlvDq8ikWAM`,
                { text },
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'xi-api-key': process.env.ELEVENLABS_API_KEY
                    },
                    responseType: 'blob'
                }
            )
                .then((response) => {
                    console.log(response)
                    const audio = new Audio(URL.createObjectURL(response.data));
                    audio.play();
                })
                .catch((error:any) => {
                    console.log(error)
                    toast({
                        variant: "destructive",
                        description: `Something went wrong while generating voice, ${error}`,
                        duration: 3000,
                    });
                })

            // if (response){
            //     toast({
            //         variant: "destructive",
            //         description: "Something went wrong while generating voice.",
            //         duration: 3000,
            //       });
            // }
            // else {
            //     const mySound = new Audio('audio/voice.mp3');
            //     mySound.play()
            // }

        }
        catch (error) {
            console.log('Error: cannot generate the voice')
        }
        finally {
            setVoiceLoading(false);
        }
    }

    // simple text to speech for Nepali
    const handleNepaliTTS = async (text: string) => {
        setVoiceLoading(true);
        if ('speechSynthesis' in window) {
            var synthesis = window.speechSynthesis;

            // Create an utterance object
            var utterance = new SpeechSynthesisUtterance(text);

            // Set utterance properties

            utterance.pitch = 1.5;
            utterance.rate = 1.25;
            utterance.volume = 0.8;
            utterance.lang = 'ne-NP'

            // Speak the utterance
            synthesis.speak(utterance);
        } else {
            console.log('Text-to-speech not supported.');
        }
        setVoiceLoading(false);
    }

    const onSubmit = (e: FormEvent<HTMLFormElement>) => {
        // creating user Message
        // storing it as userMessage
        const userMessage: ChatmessageProps = {
            role: 'user',
            content: input,
        };

        setMessages((current) => [...current, userMessage]);

        handleSubmit(e);
    }

    return (
        <div className=" flex flex-col h-full p-4 space-y-2">
            <ChatHeader
                companion={companion}

            />
            <ChatMessages
                companion={companion}
                isLoading={isLoading}
                messages={messages}

            />
            <ChatForm
                isLoading={isLoading}
                input={input}
                handleInputChange={handleInputChange}
                onSubmit={onSubmit}
                setInput={setInput}

            />
            {/* {audio && <audio autoPlay controls src={audio} />} */}
        </div>
    )
}